package hibernate.metier;

// Generated 12 avr. 2013 15:49:55 by Hibernate Tools 4.0.0

import gestiondeserreurs.ServiceHibernateException;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import service.ServiceHibernate;

/**
 * Clientel generated by hbm2java
 */
public class Clientel implements java.io.Serializable {

	private String noClient;
	private String societe;
	private String nomCl;
	private String prenomCl;
	private String adresseCl;
	private String villeCl;
	private String codePostCl;
	private Set commandeses = new HashSet(0);

	public Clientel() {
	}

	public Clientel(String noClient, String societe, String nomCl,
			String prenomCl, String adresseCl, String villeCl, String codePostCl) {
		this.noClient = noClient;
		this.societe = societe;
		this.nomCl = nomCl;
		this.prenomCl = prenomCl;
		this.adresseCl = adresseCl;
		this.villeCl = villeCl;
		this.codePostCl = codePostCl;
	}

	public Clientel(String noClient, String societe, String nomCl,
			String prenomCl, String adresseCl, String villeCl,
			String codePostCl, Set commandeses) {
		this.noClient = noClient;
		this.societe = societe;
		this.nomCl = nomCl;
		this.prenomCl = prenomCl;
		this.adresseCl = adresseCl;
		this.villeCl = villeCl;
		this.codePostCl = codePostCl;
		this.commandeses = commandeses;
	}

	public String getNoClient() {
		return this.noClient;
	}

	public void setNoClient(String noClient) {
		this.noClient = noClient;
	}

	public String getSociete() {
		return this.societe;
	}

	public void setSociete(String societe) {
		this.societe = societe;
	}

	public String getNomCl() {
		return this.nomCl;
	}

	public void setNomCl(String nomCl) {
		this.nomCl = nomCl;
	}

	public String getPrenomCl() {
		return this.prenomCl;
	}

	public void setPrenomCl(String prenomCl) {
		this.prenomCl = prenomCl;
	}

	public String getAdresseCl() {
		return this.adresseCl;
	}

	public void setAdresseCl(String adresseCl) {
		this.adresseCl = adresseCl;
	}

	public String getVilleCl() {
		return this.villeCl;
	}

	public void setVilleCl(String villeCl) {
		this.villeCl = villeCl;
	}

	public String getCodePostCl() {
		return this.codePostCl;
	}

	public void setCodePostCl(String codePostCl) {
		this.codePostCl = codePostCl;
	}

	public Set getCommandeses() {
		return this.commandeses;
	}

	public void setCommandeses(Set commandeses) {
		this.commandeses = commandeses;
	}

//  ***************************************
    //  On récupère tous les numéros de clients
    //  ***************************************
    @SuppressWarnings("unchecked")
	public List<String>  getTouslesnumerosClients()throws  ServiceHibernateException
    {  List<String>  mesNumeros = null;
          try
        {       	         	
          Session	session = ServiceHibernate.currentSession();    
          //On passe une requête SQL  en utilisant les noms des fichiers hbm
          String marequete ="SELECT c.noClient  ";
          marequete= marequete + " FROM Clientel as c ";
         
          Query query =   session.createQuery(marequete);
         mesNumeros =  query.list();  
        }
          catch (HibernateException ex) {   
           	 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
                        + ex.getMessage(), ex); 
           }
        return mesNumeros;
    }


//  *************************************************************
	//  On récupère un client 
	// Attention cette procédure doit fermer la SessionFactory pour :
	// une modification ou une suppression
	//***************************************************************
	@SuppressWarnings("unchecked")
	public Clientel  getUnClient(String  num) throws ServiceHibernateException
	{
		Clientel unc=null;
	try
	{
			Session session = ServiceHibernate.currentSession();    
	    //On passe une requête SQL 
		 Query query  =  session.createQuery(" FROM Clientel AS c  where c.noClient = ?").setString(0, num);	 
		// Solution pour récupérer une ligne, il faut passer par un itérateur
		
		List<Clientel>  mescls =  query.list();
		// on vérifie qu'une commande existe
		if ( mescls.size() >0 )
			unc = mescls.get(0);
	} 
	catch (ServiceHibernateException ex) { 
	    throw ex;
	 } 
	catch (HibernateException ex) {   
		 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
	             + ex.getMessage(), ex); 
	}
	// On doit fermer la sesion pour libérer l'onjet commande 
	ServiceHibernate.closeSession();
	 return unc;
	}
	
	public void ajouter(Clientel unclient) throws HibernateException
    {
      Transaction tx = null;
      try {
    	Session   session = ServiceHibernate.currentSession(); 
        tx = session.beginTransaction();
        // on transfère la nouvelle commande à la base  
        session.save(unclient);
        tx.commit();
      }
      catch (HibernateException ex) {  
    	  if (tx!=null) { 
          	  tx.rollback();	    	  
            }
        	 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
             + ex.getMessage(), ex);  
        }
    }
 

}


