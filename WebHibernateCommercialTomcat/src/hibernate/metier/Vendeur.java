package hibernate.metier;

// Generated 12 avr. 2013 15:49:55 by Hibernate Tools 4.0.0

import gestiondeserreurs.ServiceHibernateException;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import service.ServiceHibernate;

/**
 * Vendeur generated by hbm2java
 */
public class Vendeur implements java.io.Serializable {

	private String noVendeur;
	private Vendeur vendeur;
	private String nomVend;
	private String prenomVend;
	private Date dateEmbau;
	private String villeVend;
	private BigDecimal salaireVend;
	private BigDecimal commission;
	private Set commandeses = new HashSet(0);
	private Set vendeurs = new HashSet(0);

	public Vendeur() {
	}

	public Vendeur(String noVendeur, Vendeur vendeur, String nomVend,
			String prenomVend, Date dateEmbau, String villeVend,
			BigDecimal salaireVend, BigDecimal commission) {
		this.noVendeur = noVendeur;
		this.vendeur = vendeur;
		this.nomVend = nomVend;
		this.prenomVend = prenomVend;
		this.dateEmbau = dateEmbau;
		this.villeVend = villeVend;
		this.salaireVend = salaireVend;
		this.commission = commission;
	}

	public Vendeur(String noVendeur, Vendeur vendeur, String nomVend,
			String prenomVend, Date dateEmbau, String villeVend,
			BigDecimal salaireVend, BigDecimal commission, Set commandeses,
			Set vendeurs) {
		this.noVendeur = noVendeur;
		this.vendeur = vendeur;
		this.nomVend = nomVend;
		this.prenomVend = prenomVend;
		this.dateEmbau = dateEmbau;
		this.villeVend = villeVend;
		this.salaireVend = salaireVend;
		this.commission = commission;
		this.commandeses = commandeses;
		this.vendeurs = vendeurs;
	}

	public String getNoVendeur() {
		return this.noVendeur;
	}

	public void setNoVendeur(String noVendeur) {
		this.noVendeur = noVendeur;
	}

	public Vendeur getVendeur() {
		return this.vendeur;
	}

	public void setVendeur(Vendeur vendeur) {
		this.vendeur = vendeur;
	}

	public String getNomVend() {
		return this.nomVend;
	}

	public void setNomVend(String nomVend) {
		this.nomVend = nomVend;
	}

	public String getPrenomVend() {
		return this.prenomVend;
	}

	public void setPrenomVend(String prenomVend) {
		this.prenomVend = prenomVend;
	}

	public Date getDateEmbau() {
		return this.dateEmbau;
	}

	public void setDateEmbau(Date dateEmbau) {
		this.dateEmbau = dateEmbau;
	}

	public String getVilleVend() {
		return this.villeVend;
	}

	public void setVilleVend(String villeVend) {
		this.villeVend = villeVend;
	}

	public BigDecimal getSalaireVend() {
		return this.salaireVend;
	}

	public void setSalaireVend(BigDecimal salaireVend) {
		this.salaireVend = salaireVend;
	}

	public BigDecimal getCommission() {
		return this.commission;
	}

	public void setCommission(BigDecimal commission) {
		this.commission = commission;
	}

	public Set getCommandeses() {
		return this.commandeses;
	}

	public void setCommandeses(Set commandeses) {
		this.commandeses = commandeses;
	}

	public Set getVendeurs() {
		return this.vendeurs;
	}

	public void setVendeurs(Set vendeurs) {
		this.vendeurs = vendeurs;
	}



  //  ***************************************
    //  On récupère tous les numéros de vendeurs
    //  ***************************************
    @SuppressWarnings("unchecked")
	public List<String>  getTouslesnumerosVendeurs()throws  ServiceHibernateException
    {  
    	
    	  List<String>  mesNumeros=null;
          try
        {       	         	
          Session	session = ServiceHibernate.currentSession();    
          //On passe une requête SQL  en utilisant les noms des fichiers hbm
          String marequete ="SELECT v.noVendeur  ";
          marequete= marequete + " FROM Vendeur as v";
          Query query =   session.createQuery(marequete);
          mesNumeros =  query.list();  
        }
          catch (HibernateException ex) {   
           	 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
                        + ex.getMessage(), ex); 
           }
        return mesNumeros;
    }


//  *************************************************************
	//  On récupère un vendeur
	// Attention cette procédure doit fermer la SessionFactory pour :
	// une modification ou une suppression
	//***************************************************************
	@SuppressWarnings("unchecked")
	public Vendeur  getUnVendeur(String  num) throws ServiceHibernateException
	{
		Vendeur unv=null;
	try
	{
			Session session = ServiceHibernate.currentSession();    
	    //On passe une requête SQL 
		 Query query  =  session.createQuery(" FROM Vendeur AS v  where v.noVendeur = ?").setString(0, num);	 
		// Solution pour récupérer une ligne, il faut passer par un itérateur
		
		List<Vendeur>  mesvds =  query.list();
		// on vérifie qu'une commande existe
		if ( mesvds.size() >0 )
			unv = mesvds.get(0);
	} 
	catch (ServiceHibernateException ex) { 
	    throw ex;
	 } 
	catch (HibernateException ex) {   
		 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
	             + ex.getMessage(), ex); 
	}
	// On doit fermer la sesion pour libérer l'onjet commande 
	ServiceHibernate.closeSession();
	 return unv;
	}
	

	  //  ***************************************
	    //  On récupère tous les numéros de vendeurs chef
	    //  ***************************************
	    @SuppressWarnings("unchecked")
		public List<String>  getTouslesChefVendeurs()throws  ServiceHibernateException
	    {  
	    	  List<String>  mesVendeurs=null ;
	          try
	        {       	         	
	          Session	session = ServiceHibernate.currentSession();    
	          //On passe une requête SQL  en utilisant les noms des fichiers hbm
	          String marequete ="SELECT v.nomVend,v.prenomVend,v1.nomVend,v1.prenomVend ";
	          marequete= marequete + " FROM Vendeur as v , Vendeur as v1";
	          marequete= marequete + " WHERE v.vendeur.noVendeur = v1.noVendeur";
	          Query query =   session.createQuery(marequete);
	          mesVendeurs =  query.list();  
	        }
	          catch (HibernateException ex) {   
	           	 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
	                        + ex.getMessage(), ex); 
	           }
	        return mesVendeurs;
	    }

	    public void ajouter(Vendeur unvendeur) throws HibernateException
	    {
	      Transaction tx = null;
	      try {
	    	Session   session = ServiceHibernate.currentSession(); 
	        tx = session.beginTransaction();
	        // on transfère la nouvelle commande à la base  
	        session.save(unvendeur);
	        tx.commit();
	      }
	      catch (HibernateException ex) {  
	    	  if (tx!=null) { 
	          	  tx.rollback();	    	  
	            }
	        	 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
	             + ex.getMessage(), ex);  
	        }
	    }
}
