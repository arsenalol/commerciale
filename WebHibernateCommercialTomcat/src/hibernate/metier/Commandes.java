package hibernate.metier;

// Generated 12 avr. 2013 15:49:55 by Hibernate Tools 4.0.0

import gestiondeserreurs.ServiceHibernateException;

import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import service.ServiceHibernate;

/**
 * Commandes generated by hbm2java
 */
public class Commandes implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private String noCommand;
	private Vendeur vendeur;
	private Clientel clientel;
	private Date dateCde;
	private char facture;
	private Set detailCdes = new HashSet(0);

	public Commandes() {
	}

	public Commandes(String noCommand, Vendeur vendeur, Clientel clientel,
			Date dateCde, char facture) {
		this.noCommand = noCommand;
		this.vendeur = vendeur;
		this.clientel = clientel;
		this.dateCde = dateCde;
		this.facture = facture;
	}

	public Commandes(String noCommand, Vendeur vendeur, Clientel clientel,
			Date dateCde, char facture, Set detailCdes) {
		this.noCommand = noCommand;
		this.vendeur = vendeur;
		this.clientel = clientel;
		this.dateCde = dateCde;
		this.facture = facture;
		this.detailCdes = detailCdes;
	}

	public String getNoCommand() {
		return this.noCommand;
	}

	public void setNoCommand(String noCommand) {
		this.noCommand = noCommand;
	}

	public Vendeur getVendeur() {
		return this.vendeur;
	}

	public void setVendeur(Vendeur vendeur) {
		this.vendeur = vendeur;
	}

	public Clientel getClientel() {
		return this.clientel;
	}

	public void setClientel(Clientel clientel) {
		this.clientel = clientel;
	}

	public Date getDateCde() {
		return this.dateCde;
	}

	public void setDateCde(Date dateCde) {
		this.dateCde = dateCde;
	}

	public char getFacture() {
		return this.facture;
	}

	public void setFacture(char facture) {
		this.facture = facture;
	}

	public Set getDetailCdes() {
		return this.detailCdes;
	}

	public void setDetailCdes(Set detailCdes) {
		this.detailCdes = detailCdes;
	}

//  *******************************************************
	//  Traitements métiers 
	//  ********************************************************

       //  ***************************************
	    //  On récupère toutes les commandes
	    //  ***************************************
	    public List  getTouteslesCommandes() throws  ServiceHibernateException
	    {   
	    	List mescdes;
	        try
	        {       	         	
	          Session	session = ServiceHibernate.currentSession();    
	          //On passe une requête SQL  en utilisant les noms des fichiers hbm
	          String marequete ="SELECT c.noCommand, v.nomVend, cl.nomCl,  c.dateCde  ";
	          marequete= marequete + " FROM Commandes as c , Vendeur as v, Clientel as cl ";
	          marequete = marequete + " WHERE c.vendeur.noVendeur =  v.noVendeur  ";
	          marequete = marequete + " AND     c.clientel.noClient = cl.noClient ";
	        
	          Query query =   session.createQuery(marequete);
	          mescdes =  query.list();  
	        }
	        catch (HibernateException ex) {   
	          	 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
	                       + ex.getMessage(), ex); 
	          }
	        return mescdes;
	    }
	    
	   
	    //  ************************************************************
	    //  On récupère toutes les commandes comprises entre deux dates
	    //  ************************************************************* 
	    @SuppressWarnings("static-access")
	    public List  getTouteslesLignescommandes(Date dateDebut, Date dateFin)
	       throws  ServiceHibernateException 
	    {  
	    	List mescdes;
	    	//Calendar debut = new GregorianCalendar();
	    	//debut.setTime(new Date());
	    	//Calendar fin = new GregorianCalendar();
	    	//fin.setTime(new Date());
	    	Calendar debut = Calendar.getInstance();
	        debut.setTime(dateDebut);
	        Calendar fin = Calendar.getInstance();
	        fin.setTime(dateFin);
	       
			int jour_deb
	    	 = debut.get(debut.DAY_OF_MONTH);
	        int mois_deb = debut.get(debut.MONTH)+1;
	        int annee_deb = debut.get(debut.YEAR);
	        int jour_fin = fin.get(fin.DAY_OF_MONTH);
	        int mois_fin = fin.get(fin.MONTH)+1;
	        int annee_fin = fin.get(fin.YEAR);
	    	
	        try
	        {    
	        	//List cats = sess.createSQLQuery("select {cat.*} from cats cat")
	            //.addEntity("cat", Cat.class)
	           // .list();
	          Session	session = ServiceHibernate.currentSession();    
	          //On passe une requête SQL  en utilisant les noms des fichiers hbm
	          String marequete ="SELECT c.noCommand, v.nomVend, cl.nomCl,  c.dateCde  ";
	          marequete= marequete + " FROM Commandes as c , Vendeur as v, Clientel as cl ";
	          marequete = marequete + " WHERE c.vendeur.noVendeur =  v.noVendeur  ";
	          marequete = marequete + " AND     c.clientel.noClient = cl.noClient ";
	          marequete =  marequete + "AND c.dateCde BETWEEN '" + annee_deb + "-" + mois_deb + "-" + jour_deb + "' ";
	          marequete =  marequete + "AND '" + annee_fin + "-" + mois_fin + "-"  +  jour_fin +"'";

	          Query query =   session.createQuery(marequete);
	          mescdes =  query.list();  
	        }
	        catch (HibernateException ex) {   
	          	 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
	                       + ex.getMessage(), ex); 
	          }
	        return mescdes;
	    }
	    
	    //  ***************************************
	    //  On rajoute une commande à la base
	    //  ***************************************  
	    public void ajouter(Commandes unecommande) throws HibernateException
	    {
	      Transaction tx = null;
	      try {
	    	Session   session = ServiceHibernate.currentSession(); 
	        tx = session.beginTransaction();
	        // on transfère la nouvelle commande à la base  
	        session.save(unecommande);
	        tx.commit();
	      }
	      catch (HibernateException ex) {  
	    	  if (tx!=null) { 
	          	  tx.rollback();	    	  
	            }
	        	 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
	             + ex.getMessage(), ex);  
	        }
	    }
	 
	  //  ***************************************
	  //  On modifie une commande
	   //  ***************************************
	public void modifier(Commandes unec) throws HibernateException
	    {
		Transaction tx = null;
		
		  Session session =ServiceHibernate.currentSession();
		   tx = session.beginTransaction();
		try { 	  
	       	    session.update(unec);    	   
	            tx.commit();
	       }
	      catch (HibernateException ex) {  
	    	  if (tx!=null) { 
	          	  tx.rollback();	    	  
	            }
	        	 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
	             + ex.getMessage(), ex);  
	        }
	    }

	//  *************************************************************
	//  On récupère une commande 
	// Attention cette procédure doit fermer la SessionFactory pour :
	// une modification ou une suppression
	//***************************************************************
	@SuppressWarnings("unchecked")
	public Commandes  getUneCommande(String  nume) throws ServiceHibernateException
	{
		
		Commandes unecommande=null;
	try
	{
			Session session = ServiceHibernate.currentSession();    
	    //On passe une requête SQL 
			nume = nume.replace(" ","");
		int num = Integer.parseInt(nume);
		 Query query  =  session.createQuery(" FROM Commandes AS c  where c.noCommand = ?").setInteger(0, num);	 
		// Solution pour récupérer une ligne, il faut passer par un itérateur
		
		List<Commandes>  mescdes =  query.list();
		// on vérifie qu'une commande existe
		if ( mescdes.size() >0 )
			unecommande = mescdes.get(0);
		
	} 
	catch (ServiceHibernateException ex) { 
	    throw ex;
	 } 
	catch (HibernateException ex) {   
		 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
	             + ex.getMessage(), ex); 
	}
	// On doit fermer la sesion pour libérer l'onjet commande 
	ServiceHibernate.closeSession();
	 return unecommande;
	}

	//  ***************************************
	//  On efface toutes les commandes
	//  ***************************************
	    public void effacer(String[]  tabnum) throws HibernateException
	    {     
	      Transaction tx = null;
	      for(int i = 0; i<tabnum.length ; i++)
	      {
	        try {
	         // session = ServiceLocator.getHibernateSession(
	          //    HIBERNATE_SESSION_FACTORY);
	        	
	         Commandes unecommande;
	         unecommande = getUneCommande(tabnum[i]);
	         Session session = ServiceHibernate.currentSession(); 
	          tx = session.beginTransaction();

	          session.delete(unecommande);
	          tx.commit(); 
	          }
	        
	        catch (HibernateException ex) {  
	       	 
	       	 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
	            + ex.getMessage(), ex);  
	       }           
	      }    
	    }
	    
	    //  ***************************************
	    //  On récupère tous les numéros de commandes qui ont des details commande
	    //  ***************************************
	    @SuppressWarnings("unchecked")
		public List<String>  getTouslesnumerosCommandesFacture()throws  ServiceHibernateException
	    {  
	    	  List<String>  mesNumeros=null ;
	          try
	        {       	         	
	          Session	session = ServiceHibernate.currentSession();    
	          //On passe une requête SQL  en utilisant les noms des fichiers hbm
	          String marequete ="SELECT DISTINCT c.noCommand  ";
	          marequete= marequete + " FROM Commandes as c,DetailCde d";
	          marequete= marequete + " WHERE d.id.noCommand = c.noCommand";
	          Query query =   session.createQuery(marequete);
	          mesNumeros =  query.list();  
	        }
	          catch (HibernateException ex) {   
	           	 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
	                        + ex.getMessage(), ex); 
	           }
	        return mesNumeros;
	    }
	    
	    //  ***************************************
	    //  On récupère les composants d'une commande demandée
	    //  ***************************************
	    @SuppressWarnings("unchecked")
		public List<DetailCde>  getFactureCommande(String num)throws  ServiceHibernateException
	    {  
	    	  List<DetailCde>  mesDetailsCde=null ;
	          try
	        {       	         	
	          Session	session = ServiceHibernate.currentSession();    
	          //On passe une requête SQL  en utilisant les noms des fichiers hbm
	          String marequete ="SELECT de ";
	          marequete= marequete + " FROM DetailCde de";
	          marequete= marequete + " WHERE de.id.noCommand = " + num;
	          Query query =   session.createQuery(marequete);
	          mesDetailsCde =  query.list();  
	        }
	          catch (HibernateException ex) {   
	           	 throw new ServiceHibernateException("Impossible d'accéder à la SessionFactory: " 
	                        + ex.getMessage(), ex); 
	           }
	        return mesDetailsCde;
	    }
	    

}
